# eda_used_cars.py

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# --------------- CONFIG ------------------
input_file = r"C:\Users\rkpha\Desktop\cardekho\preprocessed\merged.xlsx"
output_dir = r"C:\Users\rkpha\Desktop\cardekho\eda"
target = 'price(in lakhs)'
os.makedirs(output_dir, exist_ok=True)
# -----------------------------------------

# Load data
df = pd.read_excel(input_file, engine='openpyxl')




# ----------- 1. DESCRIPTIVE STATS ----------
desc_stats = df.describe(include='all')
desc_stats.to_csv(os.path.join(output_dir, "summary_statistics.csv"))

# ----------- 2. DISTRIBUTIONS --------------
for col in df.columns[:15]:  # limit to first 15 for visualization sanity
    if df[col].dtype != object and col != target:
        plt.figure(figsize=(6, 4))
        sns.histplot(df[col], bins=30, kde=True)
        plt.title(f"Distribution of {col}")
        plt.savefig(os.path.join(output_dir, f"hist_{col}.png"))
        plt.close()

# ----------- 3. BOX PLOTS ------------------
for col in df.columns[:15]:
    if df[col].dtype != object and col != target:
        plt.figure(figsize=(6, 4))
        sns.boxplot(x=df[col])
        plt.title(f"Boxplot of {col}")
        plt.savefig(os.path.join(output_dir, f"box_{col}.png"))
        plt.close()

# ----------- 4. SCATTER PLOTS (vs price) ----
for col in df.columns[:15]:
    if df[col].dtype != object and col != target:
        plt.figure(figsize=(6, 4))
        sns.scatterplot(x=df[col], y=df[target])
        plt.title(f"{col} vs {target}")
        plt.savefig(os.path.join(output_dir, f"scatter_{col}_vs_price.png"))
        plt.close()

# ----------- 5. CORRELATION HEATMAP ---------
plt.figure(figsize=(14, 10))
corr = df.corr(numeric_only=True)
sns.heatmap(corr, cmap='coolwarm', annot=False)
plt.title("Correlation Heatmap")
plt.savefig(os.path.join(output_dir, "correlation_heatmap.png"))
plt.close()

# ----------- 6. FEATURE IMPORTANCE (TREE) ----
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

# Prepare X, y
X = df.drop(columns=[target])
y = df[target]

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train RandomForest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Plot feature importances
importances = rf.feature_importances_
features = X.columns
feat_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feat_df = feat_df.sort_values(by="Importance", ascending=False)

# Save top 20
feat_df.head(20).to_csv(os.path.join(output_dir, "feature_importance_top20.csv"), index=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feat_df.head(20))
plt.title("Top 20 Feature Importances (Random Forest)")
plt.savefig(os.path.join(output_dir, "feature_importance_top20.png"))
plt.close()

print("âœ… EDA Complete. Outputs saved in:", output_dir)
