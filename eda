import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
import numpy as np

# Load the preprocessed dataset
file_path = r"C:\Users\rkpha\Desktop\cardekho\app\processed_data.csv"  # Use your processed dataset path
dataset = pd.read_csv(file_path)

# Create a directory for saving the plots
output_dir = r"C:\Users\rkpha\Desktop\cardekho\eda"  # Specify the path where you want to save the plots

# Descriptive Statistics
desc_stats = dataset.describe()

# Save descriptive statistics to CSV
desc_stats.to_csv(f'{output_dir}descriptive_statistics.csv')

# Data Visualization

# 1. Histogram for numerical columns
numerical_cols = ['modelyear', 'km', 'ownerno', 'Prize']
plt.figure(figsize=(12, 8))
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 2, i)
    sns.histplot(dataset[col], kde=True)
    plt.title(f'Histogram of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
plt.tight_layout()
plt.savefig(f'{output_dir}histograms.png')
plt.close()

# 2. Boxplot for numerical columns
plt.figure(figsize=(12, 8))
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 2, i)
    sns.boxplot(x=dataset[col])
    plt.title(f'Boxplot of {col}')
    plt.xlabel(col)
plt.tight_layout()
plt.savefig(f'{output_dir}boxplots.png')
plt.close()

# 3. Scatterplot for relationships between features
plt.figure(figsize=(12, 8))
sns.scatterplot(data=dataset, x='km', y='Prize')
plt.title('Scatterplot: km vs Prize')
plt.xlabel('km')
plt.ylabel('Prize')
plt.savefig(f'{output_dir}scatterplot_km_vs_prize.png')
plt.close()

# 4. Correlation Heatmap
correlation_matrix = dataset[numerical_cols].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.savefig(f'{output_dir}correlation_heatmap.png')
plt.close()

# 5. Feature Importance (using Random Forest)
X = dataset.drop(columns=['Prize'])
y = dataset['Prize']

# Fit a Random Forest model to assess feature importance
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X, y)

# Get feature importance
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': rf.feature_importances_
})
feature_importance = feature_importance.sort_values(by='Importance', ascending=False)

# Plot feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance)
plt.title('Feature Importance from Random Forest')
plt.savefig(f'{output_dir}feature_importance.png')
plt.close()

# Return the path to the saved plots and descriptive statistics
{
    'descriptive_stats': f'{output_dir}descriptive_statistics.csv',
    'histograms': f'{output_dir}histograms.png',
    'boxplots': f'{output_dir}boxplots.png',
    'scatterplot_km_vs_prize': f'{output_dir}scatterplot_km_vs_prize.png',
    'correlation_heatmap': f'{output_dir}correlation_heatmap.png',
    'feature_importance': f'{output_dir}feature_importance.png'
}
