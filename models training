# Prize Prediction Model Training

# ðŸ”µ Step 1: Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# ðŸ”µ Step 2: Paths
input_file = r"C:\Users\rkpha\Desktop\cardekho\app\preprocessed_dataset.csv"  # your preprocessed dataset path

# ðŸ”µ Step 3: Load Dataset
df = pd.read_csv(input_file)

# ðŸ”µ Step 4: Prepare Features and Target
X = df.drop(["prize"], axis=1)
y = df["prize"]

# One-hot encode categorical variables
X = pd.get_dummies(X)

# ðŸ”µ Step 5: Imputation + Scaling
imputer = SimpleImputer(strategy='median')
scaler = MinMaxScaler()

X_imputed = imputer.fit_transform(X)
X_scaled = scaler.fit_transform(X_imputed)

# ðŸ”µ Step 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ðŸ”µ Step 7: Initialize Models
models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(alpha=1.0),
    "Decision Tree": DecisionTreeRegressor(max_depth=10, random_state=42),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
}

# ðŸ”µ Step 8: Train Models and Evaluate
results = []

for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_test)

    mae = mean_absolute_error(y_test, preds)
    mse = mean_squared_error(y_test, preds)
    r2 = r2_score(y_test, preds)

    results.append({
        "Model": name,
        "MAE": round(mae, 4),
        "MSE": round(mse, 4),
        "R2 Score": round(r2, 4)
    })

# ðŸ”µ Step 9: Output
results_df = pd.DataFrame(results)
print("\nðŸ”µ Model Performance Comparison:\n")
print(results_df.sort_values(by="R2 Score", ascending=False))

# ðŸ”µ Step 10: Save Results if needed
results_df.to_csv(r"C:\Users\rkpha\Desktop\cardekho\app\model_comparison_results.csv", index=False)

