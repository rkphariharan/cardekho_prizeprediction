from sklearn.impute import SimpleImputer
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer


# Load the dataset
dataset = pd.read_csv(r"C:\Users\rkpha\Desktop\cardekho\app\segmented_structured_dataset.csv")

# Dropping the 'Unnamed: 9' column
dataset = dataset.drop(columns=['Unnamed: 9'])

# Handling missing values
# Impute missing values for numerical columns with the median
numerical_cols = ['modelyear', 'km', 'ownerno', 'Prize']
imputer_numerical = SimpleImputer(strategy='median')
dataset[numerical_cols] = imputer_numerical.fit_transform(dataset[numerical_cols])

# Impute missing values for categorical columns with the mode (most frequent)
categorical_cols = ['Body Type']
imputer_categorical = SimpleImputer(strategy='most_frequent')
dataset[categorical_cols] = imputer_categorical.fit_transform(dataset[categorical_cols])

# Standardizing data formats for 'km' column (removing 'kms' if present and converting to int)
dataset['km'] = dataset['km'].fillna(dataset['km'].median())  # Filling NaN values if any
dataset['km'] = dataset['km'].astype(int)

# Encoding categorical variables
dataset = pd.get_dummies(dataset, columns=['make', 'transmission', 'Body Type', 'Fuel Type', 'city'], drop_first=True)

# Normalizing numerical features
scaler = MinMaxScaler()
dataset[numerical_cols] = scaler.fit_transform(dataset[numerical_cols])

# Removing outliers using IQR method for 'km' and 'Prize'
Q1_km = dataset['km'].quantile(0.25)
Q3_km = dataset['km'].quantile(0.75)
IQR_km = Q3_km - Q1_km
lower_bound_km = Q1_km - 1.5 * IQR_km
upper_bound_km = Q3_km + 1.5 * IQR_km

dataset = dataset[(dataset['km'] >= lower_bound_km) & (dataset['km'] <= upper_bound_km)]

Q1_prize = dataset['Prize'].quantile(0.25)
Q3_prize = dataset['Prize'].quantile(0.75)
IQR_prize = Q3_prize - Q1_prize
lower_bound_prize = Q1_prize - 1.5 * IQR_prize
upper_bound_prize = Q3_prize + 1.5 * IQR_prize

dataset = dataset[(dataset['Prize'] >= lower_bound_prize) & (dataset['Prize'] <= upper_bound_prize)]

# Save the processed dataset to a new CSV file
dataset.to_csv('processed_used_car_data.csv', index=False)
