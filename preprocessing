# preprocess_used_cars.py

import os
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.impute import SimpleImputer

# ----------------- CONFIG -----------------
input_dir = r"C:\Users\rkpha\Desktop\cardekho\structured"  # Folder where your cleaned Excel files are
output_dir = r"C:\Users\rkpha\Desktop\cardekho\t"  # Folder to save preprocessed CSVs
target_col = 'price(in lakhs)'  # Column to predict

# Features
num_cols = ['km', 'ownerNo', 'modelYear', 'engineCC']  # Do NOT normalize target
cat_cols = ['ft', 'bt', 'model', 'variantName', 'transmission', 'oem', 'City']
# ------------------------------------------

# Ensure output directory exists
os.makedirs(output_dir, exist_ok=True)

# Setup transformers
num_imputer = SimpleImputer(strategy='median')
cat_imputer = SimpleImputer(strategy='most_frequent')
scaler = MinMaxScaler()
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')


preprocessed_dfs = []

# Process each Excel file
for filename in os.listdir(input_dir):
    if filename.endswith(".xlsx"):
        city_name = filename.replace(".xlsx", "")
        print(f"Processing: {city_name}")

        df = pd.read_excel(os.path.join(input_dir, filename))

        # Handle missing
        df[num_cols] = num_imputer.fit_transform(df[num_cols])
        df[cat_cols] = cat_imputer.fit_transform(df[cat_cols])

        # Normalize numeric features (not price)
        df[num_cols] = scaler.fit_transform(df[num_cols])

        # One-hot encode categorical features
        encoded = pd.DataFrame(
            encoder.fit_transform(df[cat_cols]),
            columns=encoder.get_feature_names_out(cat_cols),
            index=df.index
        )

        # Combine
        df_final = pd.concat([df[[target_col]], df[num_cols], encoded], axis=1)

        # Save individual CSV
        out_path = os.path.join(output_dir, f"{city_name}_preprocessed.csv")
        df_final.to_csv(out_path, index=False)
        preprocessed_dfs.append(df_final)

# Merge all datasets and save
merged_df = pd.concat(preprocessed_dfs, ignore_index=True)
merged_df.to_csv(os.path.join(output_dir, "all_cities_preprocessed.csv"), index=False)

print("âœ… Preprocessing complete. All files saved in:", output_dir)  





